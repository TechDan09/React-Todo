{"version":3,"sources":["Components/Header.js","Components/Form.js","Components/Todo.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","typedTodo","handleChange","bind","assertThisInitialized","handleFormSubmission","event","setState","defineProperty","target","name","value","preventDefault","sendToServerUpdateTodosState","Fragment","className","onSubmit","htmlFor","type","id","onChange","React","Component","Todo","_this$props$aSingleTo","aSingleTodo","title","completed","concat","checked","style","textDecoration","color","onClick","handleCompletedState","deleteTodo","TodoList","todosList","todos","map","Todo_Todo","key","particlesOptions","particles","number","size","interactivity","events","onhover","enable","mode","App","_this2","axios","get","then","response","data","catch","error","console","log","prevState","_this3","delete","filter","_this4","newTodo","post","toConsumableArray","particles_default","params","Components_Header","Components_Form","Components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAWeA,MATf,WACI,OACEC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,yDACCF,EAAAC,EAAAC,cAAA,+HC0COC,cA5Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,UAAW,IAEZR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,qBAAuBZ,EAAKY,qBAAqBF,KAA1BT,OAAAU,EAAA,EAAAV,CAAAD,IANXA,4EASNa,GACZV,KAAKW,SAALb,OAAAc,EAAA,EAAAd,CAAA,GACEY,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,qDAKfL,GACnBA,EAAMM,iBACNhB,KAAKJ,MAAMqB,6BAA6BjB,KAAKI,MAAMC,WACnDL,KAAKW,SAAS,CAACN,UAAW,sCAI1B,OACEb,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACC1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,YAAYC,SAAUpB,KAAKS,sBACvCjB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,cACX3B,EAAAC,EAAAC,cAAA,SAAO2B,QAAQ,SAAf,oBACA7B,EAAAC,EAAAC,cAAA,SACI4B,KAAK,OACLR,KAAK,YACLK,UAAU,eACVI,GAAG,QACHC,SAAUxB,KAAKM,aACfS,MAAOf,KAAKI,MAAMC,aAG1Bb,EAAAC,EAAAC,cAAA,UAAQyB,UAAU,mBAAlB,mBAvCQM,IAAMC,WCAJC,cAEnB,SAAAA,EAAY/B,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KACZJ,0EAEC,IAAAgC,EAEuB5B,KAAKJ,MAAMiC,YAAnCC,EAFCF,EAEDE,MAAOP,EAFNK,EAEML,GAAIQ,EAFVH,EAEUG,UAKjB,OACGvC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,YACX3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,kCACX3B,EAAAC,EAAAC,cAAA,SACI4B,KAAK,WACLH,UAAU,uBACVI,GAAE,uBAAAS,OAAyBT,GAC3BU,QAASF,IAEbvC,EAAAC,EAAAC,cAAA,SACIyB,UAAU,uBACVE,QAAO,uBAAAW,OAAyBT,GAChCW,MAAOH,EAhBA,CACtBI,eAAgB,eAChBC,MAAO,WAc4C,KACpCC,QAASrC,KAAKJ,MAAM0C,sBAEnBR,IAGTtC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,WACX3B,EAAAC,EAAAC,cAAA,UAAQyB,UAAU,wBAAwBkB,QAASrC,KAAKJ,MAAM2C,YAA9D,mBA/BmBd,IAAMC,WC0BzBc,cAvBb,SAAAA,EAAY5C,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,GAAA1C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KACZJ,0EAMC,IAAAC,EAAAG,KACHyC,EAAYzC,KAAKJ,MAAM8C,MAAMC,IAAI,SAAAd,GAAW,OAC5CrC,EAAAC,EAAAC,cAACkD,EAAD,CACAf,YAAaA,EACbgB,IAAKhB,EAAYN,GACjBe,qBAAsB,kBAAMzC,EAAKD,MAAM0C,qBAAqBT,EAAYN,KACxEgB,WAAY,kBAAM1C,EAAKD,MAAM2C,WAAWV,EAAYN,SAExD,OACM/B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,YACZsB,UAnBUhB,IAAMC,2BCMvBoB,eAAmB,CACnBC,UAAa,CACTC,OAAU,CACNjC,MAAS,IAEbkC,KAAQ,CACJlC,MAAS,IAGjBmC,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPC,QAAU,EACVC,KAAQ,eAkFXC,cA3Eb,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjB1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KACCQ,MAAQ,CACXsC,MAAO,IAET7C,EAAKoB,6BAA+BpB,EAAKoB,6BAA6BV,KAAlCT,OAAAU,EAAA,EAAAV,CAAAD,IACpCA,EAAKyC,qBAAuBzC,EAAKyC,qBAAqB/B,KAA1BT,OAAAU,EAAA,EAAAV,CAAAD,IAC5BA,EAAK0C,WAAa1C,EAAK0C,WAAWhC,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAPHA,mFAUC,IAAA2D,EAAAxD,KAClByD,IAAMC,IAAI,wDACPC,KAAK,SAAAC,GAAQ,OAAIJ,EAAK7C,SAAS,CAAC+B,MAAOkB,EAASC,SAChDC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,kDAGvBxC,GACnByC,QAAQC,IAAI1C,GACZvB,KAAKW,SAAS,SAAAuD,GAAS,MAAK,CACxBxB,MAAOwB,EAAUxB,MAAMC,IAAI,SAAAd,GAIzB,OAHIA,EAAYN,KAAOA,IACrBM,EAAYE,WAAaF,EAAYE,WAEhCF,0CAKJN,GAAI,IAAA4C,EAAAnE,KACbyD,IAAMW,OAAN,8CAAApC,OAA2DT,IAC1DoC,KAAK,SAAAC,GACJO,EAAKxD,SAAS,CACZ+B,MAAOyB,EAAK/D,MAAMsC,MAAM2B,OAAO,SAAAxC,GAAW,OAAIA,EAAYN,IAAMA,QAGnEuC,MAAM,SAACC,GACJC,QAAQC,IAAIF,0DAIW1D,GAAW,IAAAiE,EAAAtE,KAClCuE,EAAU,CACZzC,MAAOzB,EACP0B,WAAW,GAGb0B,IAAMe,KAAK,8CAA+CD,GACvDZ,KAAK,SAACC,GACLU,EAAK3D,SAAS,CAAC+B,MAAK,GAAAV,OAAAlC,OAAA2E,EAAA,EAAA3E,CAAMwE,EAAKlE,MAAMsC,OAAjB,CAAwBkB,EAASC,WAEtDC,MAAM,SAACC,GACNC,QAAQC,IAAIF,sCAKhB,OACEvE,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAW0B,UAAU,YAAYwD,OAAQ7B,IACzCtD,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,2BACb3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,8BACb3B,EAAAC,EAAAC,cAACkF,EAAD,MACApF,EAAAC,EAAAC,cAACmF,EAAD,CAAM5D,6BAA8BjB,KAAKiB,+BACzCzB,EAAAC,EAAAC,cAACoF,EAAD,CACEpC,MAAO1C,KAAKI,MAAMsC,MAClBJ,qBAAsBtC,KAAKsC,qBAC3BC,WAAYvC,KAAKuC,uBAnEbd,IAAMC,WChBJqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.a5ce1541.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header () {\r\n    return (\r\n      <div>\r\n      \t<h3>⚡⚡The Ripper Todo App⚡⚡</h3>\r\n        <p>Welcome To The Ripper To-Do App, Delete the sample todos below and add your desired ones. &#128519; :</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \ttypedTodo: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFormSubmission = this.handleFormSubmission.bind(this);\r\n\t}\r\n\r\n  handleChange(event) {\r\n  \tthis.setState({\r\n  \t\t[event.target.name]: event.target.value\r\n  \t})\r\n  }\r\n\r\n\r\n  handleFormSubmission(event) {\r\n    event.preventDefault();\r\n    this.props.sendToServerUpdateTodosState(this.state.typedTodo);\r\n    this.setState({typedTodo: ''})\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      \t<form className=\"todo-form\" onSubmit={this.handleFormSubmission}>\r\n      \t    <div className=\"form-group\">\r\n      \t        <label htmlFor=\"title\">Enter Todo Title</label>\r\n      \t        <input \r\n      \t            type=\"text\" \r\n      \t            name=\"typedTodo\" \r\n      \t            className=\"form-control\" \r\n      \t            id=\"title\"\r\n      \t            onChange={this.handleChange}\r\n      \t            value={this.state.typedTodo}\r\n      \t        />\r\n      \t    </div>\r\n      \t    <button className=\"btn btn-primary\">Submit</button>\r\n      \t</form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nexport default class Todo extends React.Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n  \t//console.log(this.props.aSingleTodo);\r\n  \tconst {title, id, completed} = this.props.aSingleTodo;\r\n  \tconst completedStyle = {\r\n  \t\ttextDecoration: 'line-through',\r\n  \t\tcolor: '#9e9999'\r\n  \t}\r\n    return (\r\n      \t<div className=\"checkbox\">\r\n      \t    <div className=\"custom-control custom-checkbox\">\r\n      \t        <input \r\n      \t            type=\"checkbox\" \r\n      \t            className=\"custom-control-input\"\r\n      \t            id={`custom-control-input${id}`}\r\n      \t            checked={completed}\r\n      \t        />\r\n      \t        <label \r\n      \t            className=\"custom-control-label\" \r\n      \t            htmlFor={`custom-control-input${id}`}\r\n      \t            style={completed ? completedStyle : null}\r\n      \t            onClick={this.props.handleCompletedState}\r\n      \t        >\r\n      \t            {title}\r\n      \t        </label>\r\n      \t    </div>\r\n      \t    <div className=\"delTodo\">\r\n      \t        <button className=\"btn btn-danger btn-sm\" onClick={this.props.deleteTodo} >Delete</button>\r\n      \t    </div>\r\n      \t</div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Todo from './Todo.js'\r\n\r\nclass TodoList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    //this.privateHandleCompletedState = this.privateHandleCompletedState.bind(this);\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    let todosList = this.props.todos.map(aSingleTodo => \r\n        <Todo \r\n        aSingleTodo={aSingleTodo} \r\n        key={aSingleTodo.id} \r\n        handleCompletedState={() => this.props.handleCompletedState(aSingleTodo.id)}\r\n        deleteTodo={() => this.props.deleteTodo(aSingleTodo.id)}\r\n        /> );\r\n    return (\r\n          <div className=\"todolist\">\r\n            {todosList}\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList","import React from 'react';\nimport Particles from 'react-particles-js';\nimport Header from './Components/Header';\nimport Form from './Components/Form';\nimport TodoList from './Components/TodoList';\nimport axios from 'axios';\nimport './App.css';\nimport 'tachyons';\n\nconst particlesOptions = {\n      \"particles\": {\n          \"number\": {\n              \"value\": 80\n          },\n          \"size\": {\n              \"value\": 2\n          }\n      },\n      \"interactivity\": {\n          \"events\": {\n              \"onhover\": {\n                  \"enable\": true,\n                  \"mode\": \"repulse\"\n              }\n          }\n      }\n  }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        todos: [],\n      }\n      this.sendToServerUpdateTodosState = this.sendToServerUpdateTodosState.bind(this);\n      this.handleCompletedState = this.handleCompletedState.bind(this);\n      this.deleteTodo = this.deleteTodo.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos/?_limit=3')\n      .then(response => this.setState({todos: response.data}))\n      .catch(error => console.error('Error:', error))\n  }\n\n  handleCompletedState(id) {\n    console.log(id);\n    this.setState(prevState => ({\n        todos: prevState.todos.map(aSingleTodo => {\n          if (aSingleTodo.id === id) {\n            aSingleTodo.completed = !aSingleTodo.completed;\n          }\n          return aSingleTodo;\n        })\n    }))\n  }\n\n  deleteTodo(id) {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(response => {\n      this.setState({\n        todos: this.state.todos.filter(aSingleTodo => aSingleTodo.id != id)\n      })\n    })\n    .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  sendToServerUpdateTodosState(typedTodo) {\n    let newTodo = {\n      title: typedTodo,\n      completed: false\n    };\n\n    axios.post('https://jsonplaceholder.typicode.com/todos/', newTodo)\n      .then((response) => {\n        this.setState({todos: [...this.state.todos, response.data]});\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render (){\n    return (\n      <React.Fragment>\n        <Particles className='particles' params={particlesOptions}/>\n        <div className=\"todolist-wrapper shadow\">\n          <div className=\"todolist-container mt4 mb4\">\n            <Header />\n            <Form sendToServerUpdateTodosState={this.sendToServerUpdateTodosState} />\n            <TodoList \n              todos={this.state.todos}\n              handleCompletedState={this.handleCompletedState}\n              deleteTodo={this.deleteTodo}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}